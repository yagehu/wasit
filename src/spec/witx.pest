WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

document = { SOI ~ (comment | decl)* ~ EOI }

decl = _{ typename | module }

typename = { "(" ~ "typename" ~ id ~ type_ref ~ annotation_expr* ~ ")" }

comment = @{ ";" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

id = @{ "$" ~ (ASCII_ALPHANUMERIC | "." | "-" | "_" | "'")+ }

type_ref = { id | type }

int_repr = { u8 | u16 | u32 | u64 }

type =
  { s64
  | u8
  | u16
  | u32
  | u64
  | handle
  | enum
  | union
  | flags
  | record
  | pointer
  | const_pointer
  | list
  | string
  | expected
  }

s64 = @{ "s64" }
u8  = @{ "u8" }
u16 = @{ "u16" }
u32 = @{ "u32" }
u64 = @{ "u64" }


handle = { "(" ~ "handle" ~ ")" }

string = @{ "string" }

enum =
  { "(" ~ "enum"
  ~ "(" ~ "@witx" ~ "tag" ~ int_repr ~ ")"
  ~ (comment | id)+
  ~ ")"
  }

union =
  { "(" ~ "union"
  ~ "(" ~ "@witx" ~ "tag" ~ id ~ ")"
  ~ (comment | id)+
  ~ ")"
  }

flags =
  { "(" ~ "flags"
  ~ "(" ~ "@witx" ~ "repr" ~ int_repr ~ ")"
  ~ (comment | id)+
  ~ ")"
  }

pointer = { "(" ~ "@witx" ~ "pointer" ~ type_ref ~ ")" }
const_pointer = { "(" ~ "@witx" ~ "const_pointer" ~ type_ref ~ ")" }

record =
  { "(" ~ "record"
  ~ (comment | record_field)+
  ~ ")"
  }

expected =
  { "(" ~ "expected" ~ type_ref?
  ~ "(" ~ "error" ~ type_ref ~ ")"
  ~ ")"
  }

record_field = { "(" ~ "field" ~ id ~ type_ref ~ ")" }

list = { "(" ~ "list" ~ type_ref ~ ")" }

module = { "(" ~ "module" ~ id ~ (function | comment)* ~ ")" }

function_name = @{ (ASCII_ALPHANUMERIC | "-" | "_")+ }

function =
  { "(" ~ "@interface" ~ "func"
  ~ "(" ~ "export" ~ "\"" ~ function_name ~ "\"" ~ ")"
  ~ (comment | param)*
  ~ (comment | result)*
  ~ annotation_expr*
  ~ ")"
  }

param = { "(" ~ "param" ~ id ~ type_ref ~ ")" }
result = { "(" ~ "result" ~ id ~ type_ref ~ ")" }

annotation_expr =
  { "(" ~ &"@"
  ~ expr*
  ~ ")"
  }

expr =
 _{ id
  | annotation
  | keyword
  | number
  | sexpr
  | comment
  }

keyword =
  { "field"
  | "i64.const"
  | "param"
  | "record"
  | "result"
  }

number = @{ "-"? ~ ASCII_DIGIT+ }

annotation = @{ "@" ~ (ASCII_ALPHANUMERIC | "." | "-" | "_")+ }

sexpr = { "(" ~ expr* ~ ")" }
